package utils

import java.util

import com.hankcs.hanlp.HanLP
import com.hankcs.hanlp.dictionary.py.Pinyin
import scala.collection.JavaConverters._


object HanLPUtil {
  //val stopWords = Set("啊", "阿", "哎", "唉", "俺", "按", "吧", "把", "被", "本", "比", "彼", "边", "别", "并", "朝", "趁", "乘", "冲", "除", "此", "从", "打", "待", "但", "当", "到", "得", "的", "等", "地", "第", "对", "多", "而", "嘎", "该", "赶", "个", "各", "给", "跟", "故", "管", "归", "过", "哈", "呵", "和", "何", "嘿", "哼", "乎", "哗", "或", "及", "即", "几", "己", "既", "将", "较", "叫", "借", "尽", "经", "就", "据", "靠", "咳", "可", "啦", "来", "离", "哩", "连", "了", "临", "另", "论", "嘛", "吗", "冒", "么", "每", "们", "某", "拿", "哪", "那", "乃", "呢", "能", "你", "您", "宁", "哦", "呕", "呸", "凭", "其", "起", "且", "让", "任", "如", "若", "啥", "是", "谁", "顺", "虽", "随", "所", "他", "它", "她", "倘", "腾", "替", "同", "哇", "往", "望", "为", "喂", "我", "呜", "嘻", "吓", "像", "向", "嘘", "呀", "焉", "沿", "要", "也", "一", "依", "矣", "以", "因", "哟", "用", "由", "有", "又", "于", "与", "哉", "在", "咱", "则", "怎", "咋", "照", "者", "这", "吱", "之", "至", "着", "自", "纵", "兮", "呃", "呗", "咚", "咦", "喏", "啐", "嗬", "嗯", "嗳", "半", "梆", "饱", "甭", "必", "便", "不", "才", "常", "臭", "初", "出", "传", "纯", "粗", "大", "带", "殆", "单", "定", "都", "独", "方", "逢", "弗", "甫", "概", "敢", "刚", "更", "共", "固", "怪", "光", "很", "互", "还", "会", "活", "极", "见", "仅", "谨", "近", "竟", "绝", "均", "喀", "看", "快", "老", "历", "立", "屡", "略", "蛮", "满", "没", "莫", "呐", "奈", "内", "怕", "砰", "乒", "颇", "奇", "齐", "岂", "迄", "千", "万", "切", "窃", "顷", "去", "然", "仍", "汝", "上", "下", "些", "亦", "人", "今", "使", "儿", "再", "凡", "却", "只", "后", "咧", "喽", "嗡", "好", "小", "尔", "已", "巴", "无", "曾", "最", "欤", "种", "致", "诸", "距")
  def segment(q: String): List[String] = {
    //HanLP.segment(q.trim).asScala.map(_.word).filter(w => !stopWords.contains(w)).filter(_.trim != "").toList
    HanLP.segment(q.trim).asScala.map(_.word).filter(_.trim != "").toList
  }

  def convertToPinyin(text: String): String = {
    HanLP.convertToPinyinList(text).asScala.zipWithIndex.map { case (pinyin, i) =>
      pinyin.getPinyinWithoutTone match {
        case "none" => text.charAt(i)
        case others => others
      }
    } mkString("")
  }

}
